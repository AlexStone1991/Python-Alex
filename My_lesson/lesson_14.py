# TODO Функции. Нейминг. Философия. Типы аргументов. Урок 14.
# TODO для обновления гита git fetch

# - DRY - Don't Repeat Yourself (не повторяйся)
# - SRP - single responsibility principle (принцип единственной ответственности)
# Функция - возможность вынести логику в целосстную независимую сущность. которая может что то принять на вход и что то отдать на выходе

# Правила нейминга для функци в Python

# 1. snake_case - для названия функций
# 2. налиичие глагола в названии
# 3 максимально точное описание действия в названии
# 4. не использовать зарезервированных слов
# 5. можно использовать 3-4 слова

"""
Нельзя начинать с цифр
Нельзя использовать дефисы
Нельзя использовать пробелы
Нельзя использовать зарезервированные слова Python

Известные цитаты про функции:

"Функции должны делать что-то одно. Они должны делать это хорошо. Они должны делать только это."

Роберт Мартин (Uncle Bob)

"Хорошая функция похожа на хороший абзац: она посвящена одной теме и содержит детали, поддерживающие эту тему."

Стив Макконнелл

"Функциональное программирование - это программирование без побочных эффектов. Оно делает поведение программы более предсказуемым."

Джон Хьюз

"Если функция делает больше, чем говорит её название - у вас проблемы."

Мартин Фаулер

"Функции - это рецепты. Параметры - ингредиенты. Результат - готовое блюдо."
Эрик Эллиотт
"""
"""
def print_hello():
    print('Hello')

print_hello()

def print_message(name, message):
    print(f'имя {name}, сообщение {message}')

print_message('Алексей', 'Привет!')
print_message("Привет", 'Алексей')

# keyword arguments
print_message(message='Привет', name='Миша')

arguments = ['Серега', 'Привет']
print_message(*arguments)
print_message(arguments[0], arguments[1])

arguments_dict = {
    'name': 'Серега',
    'message': 'Привет'
}
print_message(**arguments_dict) #распаковка словаря
print_message(message=arguments_dict['message'], name=arguments_dict['name'])

print(*arguments) #печатает имя и сообщение
print(*arguments_dict) # печатает ключи словаря
"""
# return - возвращает значение. Если нет return, то функция возвращает None.
# Останавливает полностью функции и возвращает данные. Циклы условия - все останавливается.
# функция с этим типами аргументов

def some_func(name, last_name, age=18): #тут не дописали в конце принты!!!
    return f'имя {name}, Фамилия {last_name}, Возраст: {age}'

some_func('Алексей', 'Иванов')
some_func('Алексей', 'Иванов', 25)
some_func(name='Алексей', last_name='Иванов')
some_func(name='Алексей', last_name='Иванов', age=25)

# PRACTICE - Функция проверки на совершенолетие
"""
Напишите функцию is_adult которая прнимает один обязательный аргумент ( возраст) и
аргумент по умолчанию (порог совершенолетия).
Возвращает True или False в зависимости от того, является ли возраст больше или равным порогу совершенолетия.

"""
"""
def is_adult(age, threshold=18):
    return age >= threshold

def main():
    user_age = int(input('Введите возраст: '))

    if is_adult(user_age):
        print('Вы совершеннолетний')
    else:
        print('Вы несовершеннолетний')

    input('Нажмите Enter для выхода')
    exit()

main()
"""
"""
print("Один")
print("Один", "Два",  "Три", sep='-', end='\n')
print(["Один"], ["Два"], ["Три"], sep='-', end='\n')

# *args - аргументы. множественные аргументы, в неограниченном количестве

def print_all(*items):
    print(items)
    print((type(items)))
    for arg in items:
        print(arg)

print_all('Один')
print_all('Один', 'Два', 'Три')

items = ['Один', 'Два', 'Три']
print_all(*items)
"""

# PRACTICE - Функция c *words для проверки на палиндром
"""
Напишите функцию is_palindrome которая принимает *words аргументы
и печатает Word - это ...
Пусть проверка будет включать и регистр, а так же пробелы - чтобы многословные палиндромы тоже проверялись
"""
"""
def is_palindrome(*words):
    for word in words:
        if word.lower().replace(' ', '') == word.lower().replace(' ', '')[::-1]:
            print(f'{word} - это палиндром')
        else:
            print(f'{word} - это не палиндром')

palindormes = [
    "казак",
    "Топот",
    "ДОвоД",
    "А роза упала на лапу Азора",
    "Аргентина МаниТ негра",
]
is_palindrome(*palindormes)
"""
# что бы она могла отдавать наружу?
# 1. список списков. [["ТопоТ", True], ...]
# 2. список словарей [{"word": "ТопоТ", "resukt": True}, ...]
# 3. словарь {"ТопоТ": True, ...}

# практика напишете таблицу умножения что б был прользовательский ввод

def table_ymnog(num):
    for i in range(1, 10):
        print(f'{num} * {i} = {num * i}')
table_ymnog(int(input('Введите число: ')))
# TODO range это последовательность чисел.



