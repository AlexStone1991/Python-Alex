import os  # Импортируем модуль для работы с операционной системой (проверка файлов)
import json  # Импортируем модуль для работы с JSON файлами

"""
Класс ToDo - это шаблон для создания задач
Каждая задача будет объектом этого класса
"""
class ToDo:
    # Конструктор класса - вызывается при создании новой задачи
    def __init__(self, id, title, discription, status=False):
        self.id = id  # Уникальный идентификатор задачи (число)
        self.title = title  # Название задачи (строка)
        self.discription = discription  # Описание задачи (строка)
        self.status = status  # Статус выполнения: False - не выполнено, True - выполнено

    # Метод для преобразования объекта задачи в словарь
    # Нужен потому что JSON не понимает объекты Python, только простые типы данных
    def to_dict(self):
        return {
            "id": self.id,  # Возвращаем ID как число
            "title": self.title,  # Возвращаем название как строку
            "discription": self.discription,  # Возвращаем описание как строку
            "status": self.status  # Возвращаем статус как True/False
        }

"""
Функция загрузки задач из файла
Зачем: чтобы при запуске программы восстановить все сохраненные задачи
"""
def load_tasks():
    # Проверяем существует ли файл с задачами
    if os.path.exists("todo_fils.json"):
        # Открываем файл для чтения ('r' - read)
        # encoding="utf-8" чтобы правильно читать русские буквы
        with open("todo_fils.json", "r", encoding="utf-8") as file:
            # Загружаем данные из JSON файла в переменную todo_data
            # json.load() преобразует JSON в Python объекты (списки, словари)
            todo_data = json.load(file)
            
            # Создаем список объектов ToDo из данных файла
            # Это называется "list comprehension" - компактный способ создания списков
            todos = [ToDo(todo["id"],  # Создаем объект ToDo для каждой задачи в файле
                        todo["title"],  # Передаем название из файла
                        todo["discription"],  # Передаем описание из файла
                        todo["status"])  # Передаем статус из файла
                        for todo in todo_data]  # Для каждого элемента в todo_data
            
            return todos  # Возвращаем список задач
    
    return []  # Если файла нет, возвращаем пустой список

"""
Функция сохранения задач в файл
Зачем: чтобы не потерять задачи после закрытия программы
"""
def save_tasks(todos):
    # Открываем файл для записи ('w' - write)
    # Если файла нет - он создается, если есть - перезаписывается
    with open("todo_fils.json", "w", encoding="utf-8") as file:
        # Преобразуем все задачи в словари для сохранения в JSON
        # to_dict() вызывается для каждого объекта в списке todos
        todo_data = [todo.to_dict() for todo in todos]
        
        # Сохраняем данные в файл в формате JSON
        # indent=4 делает файл красивым и читаемым (добавляет отступы)
        json.dump(todo_data, file, indent=4)

"""
Функция добавления новой задачи
Зачем: чтобы пользователь мог добавлять новые задачи в список
"""
def add_task(todos):
    # Запрашиваем у пользователя данные для новой задачи
    title = input("Введите название задачи: ")  # Получаем название
    discription = input("Введите описание задачи: ")  # Получаем описание

    # Генерируем уникальный ID для новой задачи
    if todos:  # Если список задач не пустой
        # Находим максимальный ID среди всех задач и добавляем 1
        max_id = max(todo.id for todo in todos) + 1
    else:  # Если список пустой
        max_id = 1  # Начинаем с первого ID

    # Создаем новый объект задачи с полученными данными
    new_todo = ToDo(max_id, title, discription)
    
    # Добавляем новую задачу в конец списка todos
    todos.append(new_todo)
    
    # Сохраняем обновленный список задач в файл
    save_tasks(todos)
    
    # Сообщаем пользователю об успешном добавлении
    print("Задача успешно добавлена!")

"""
Функция показа всех задач
Зачем: чтобы пользователь мог видеть все свои задачи
"""
def show_tasks(todos):
    # Проверяем есть ли задачи для показа
    if not todos:  # Если список пустой
        print("Список задач пуст!")  # Сообщаем об этом
        return  # Выходим из функции досрочно
    
    # Выводим заголовок
    print("\nСписок задач:")
    
    # Перебираем все задачи в списке
    for todo in todos:
        # Преобразуем статус из True/False в понятный текст
        status = "Выполнено" if todo.status else "Не выполнено"
        
        # Выводим основную информацию о задаче
        print(f"{todo.id}. {todo.title} - {status}")
        
        # Если у задачи есть описание - выводим его
        if todo.discription:
            print(f"    Описание: {todo.discription}")
            print()  # Пустая строка для красоты

"""
Функция изменения статуса задачи
Зачем: чтобы пользователь мог отмечать задачи выполненными
"""
def toggle_task_status(todos):
    # Показываем все задачи чтобы пользователь видел какие есть
    show_tasks(todos)
    
    # Проверяем есть ли задачи вообще
    if not todos:
        return  # Если нет - выходим
    
    # Блок try-except для обработки ошибок
    try:
        # Запрашиваем ID задачи и преобразуем в число
        task_id = int(input("Введите ID задачи, чтобы изменить её статус: "))
        
        # Ищем задачу с нужным ID
        for todo in todos:
            if todo.id == task_id:  # Если нашли нужную задачу
                # Меняем статус на противоположный (True ↔ False)
                todo.status = not todo.status
                
                # Сохраняем изменения в файл
                save_tasks(todos)
                
                # Сообщаем об успехе
                print(f"Статус задачи {task_id} изменен")
                return  # Выходим из функции после успеха
            
        # Если дошли сюда - задача не найдена
        print(f"Задача с ID {task_id} не найдена.")
    
    except ValueError:  # Если пользователь ввел не число
        print("Пожалуйста введите число!")

"""
Функция удаления задачи
Зачем: чтобы пользователь мог удалять ненужные задачи
"""
def delete_task(todos):
    # Показываем задачи для выбора
    show_tasks(todos)
    
    # Проверяем есть ли задачи
    if not todos:
        return
    
    # Обрабатываем возможные ошибки
    try:
        # Получаем ID задачи для удаления
        task_id = int(input("Введите ID задачи, чтобы удалить её: "))
        
        # Перебираем задачи с их индексами (номерами в списке)
        for i, todo in enumerate(todos):
            if todo.id == task_id:  # Если нашли нужную задачу
                # Удаляем задачу из списка по индексу
                delete_todo = todos.pop(i)
                
                # Сохраняем обновленный список
                save_tasks(todos)
                
                # Сообщаем об успехе
                print(f"Задача с ID {task_id} удалена!")
                return  # Выходим после удаления
        
        # Если задача не найдена
        print(f"Задача с ID {task_id} не найдена.")

    except ValueError:  # Если ввели не число
        print("Пожалуйста введите число!")

"""
Главная функция программы
Зачем: точка входа в приложение, управляет всем процессом
"""
def main():
    # Загружаем задачи из файла при запуске
    todos = load_tasks()

    # Бесконечный цикл меню - работает пока пользователь не выйдет
    while True:
        # Рисуем разделитель для красоты
        print("\n========================")
        
        # Показываем меню с вариантами действий
        print("\nTODO приложение:")
        print("1. Добавить задачу")
        print("2. Показать все задачи")
        print("3. Изменить статус задачи")
        print("4. Удалить задачу")
        print("5. Выйти")

        # Запрашиваем выбор пользователя
        choice = input("Выберите действие:(1-5): ")
        
        # Рисуем разделитель
        print("\n========================")

        # Обрабатываем выбор пользователя
        if choice == "1":
            add_task(todos)  # Добавляем задачу
        elif choice == "2":
            show_tasks(todos)  # Показываем задачи
        elif choice == "3":
            toggle_task_status(todos)  # Меняем статус
        elif choice == "4":
            delete_task(todos)  # Удаляем задачу
        elif choice == "5":
            print("Вы вышли из приложения!")  # Прощаемся
            break  # Выходим из цикла - завершаем программу
        else:
            # Если ввели неверный вариант
            print("Неверный выбор. пожалуйста выберите от 1-5.")

"""
Специальная проверка которая запускает программу только если
этот файл запущен напрямую, а не импортирован как модуль
"""
if __name__ == "__main__":
    main()  # Запускаем главную функцию