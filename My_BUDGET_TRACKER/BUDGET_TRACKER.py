# BUDGET TRACKER –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

# –£—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç (–µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è)
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
# –ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü

"""
–ë–ê–ó–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ:
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚úÖ –ë–∞–ª–∞–Ω—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
"""
# add_transaction() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# show_balance() - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
# show_transactions() - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
# show_statistics() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

# –î–æ—Ö–æ–¥—ã: –∑–∞—Ä–ø–ª–∞—Ç–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –ø–æ–¥–∞—Ä–∫–∏
# –†–∞—Å—Ö–æ–¥—ã: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è

"""
üéØ –ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò –ü–û –î–ù–Ø–ú:
–î–µ–Ω—å 1: –ö–ª–∞—Å—Å Transaction + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
–î–µ–Ω—å 2: –ü–æ–∫–∞–∑ –æ–ø–µ—Ä–∞—Ü–∏–π + –±–∞–ª–∞–Ω—Å
–î–µ–Ω—å 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
–î–µ–Ω—å 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ/—Ç–∏–ø—É
–î–µ–Ω—å 5: –ë—é–¥–∂–µ—Ç + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
"""

from datetime import datetime
import os
import json



class Transaction:
    INCOME = "–¥–æ—Ö–æ–¥"
    EXPENSE = "—Ä–∞—Å—Ö–æ–¥"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    SALARY = "–∑–∞—Ä–ø–ª–∞—Ç–∞"
    INVESTMENTS = "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏" 
    GIFTS = "–ø–æ–¥–∞—Ä–∫–∏"
    OTHER_INCOME = "–¥—Ä—É–≥–∏–µ –¥–æ—Ö–æ–¥—ã"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    FOOD = "–µ–¥–∞"
    TRANSPORT = "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    HOUSE = "–∂–∏–ª—å–µ"
    ENTERTAINMENT = "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
    OTHER_EXPENSE = "–¥—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"

    def __init__(self, id, type, category, amount, description="", date=None,):
        if type not in (self.INCOME, self.EXPENSE):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–¥–æ—Ö–æ–¥' –∏–ª–∏ '—Ä–∞—Å—Ö–æ–¥'.")
        
        self.id = id
        self.type = type
        self.category = category
        self.amount = amount
        self.description = description
        self.date = date if date else datetime.now().strftime("%Y-%m-%d")
        
    def to_dict(self):
        return {
            "id": self.id,
            "type": self.type,
            "category": self.category,
            "amount": self.amount,
            "description": self.description,
            "date": self.date
        }
    

def choose_category(transaction_type):
    if transaction_type == Transaction.INCOME:
        categories = [Transaction.SALARY, Transaction.INVESTMENTS, Transaction.GIFTS, Transaction.OTHER_INCOME]
    else:
        categories = [Transaction.FOOD, Transaction.TRANSPORT, Transaction.HOUSE, Transaction.ENTERTAINMENT, Transaction.OTHER_EXPENSE]

    print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {transaction_type}:\n")
    for i, category in enumerate(categories, 1):
        print(f"{i}. {category}\n")

    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "))
            if 1 <= choice <= len(categories):
                return categories[choice - 1]
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

def add_transaction(transactions):  # ‚Üê –∏—Å–ø—Ä–∞–≤–∏–ª –Ω–∞ transactions
    print(f"\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n")
    print("1. –î–æ—Ö–æ–¥")
    print("2. –†–∞—Å—Ö–æ–¥\n")

    while True:
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (1 –∏–ª–∏ 2): "))
            if choice == 1:
                transaction_type = Transaction.INCOME
                category = choose_category(transaction_type)
                amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞: "))
                description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
                new_id = len(transactions) + 1
                transactions.append(Transaction(new_id, transaction_type, category, amount, description))
                print("–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                break

            elif choice == 2:
                transaction_type = Transaction.EXPENSE
                category = choose_category(transaction_type)
                amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞: "))
                description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
                new_id = len(transactions) + 1
                transactions.append(Transaction(new_id, transaction_type, category, amount, description))
                print("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                break

            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def show_balance(transactions):
    total_income = sum(t.amount for t in transactions if t.type == Transaction.INCOME)
    total_expense = sum(t.amount for t in transactions if t.type == Transaction.EXPENSE)
    balance = total_income - total_expense

    print(f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n")

def show_transactions(transactions):
    print("\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n")
    
    for transaction in transactions:
        print(f"ID: {transaction.id}")
        print(f"–¢–∏–ø: {transaction.type}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}")
        print(f"–°—É–º–º–∞: {transaction.amount:.2f} —Ä—É–±.")
        print(f"–î–∞—Ç–∞: {transaction.date}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}")
        print("-" * 30)

def show_statistics(transactions):
    print("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
    # –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    income_by_category = {}
    for t in transactions:
        if t.type == Transaction.INCOME:
            income_by_category[t.category] = income_by_category.get(t.category, 0) + t.amount

    print("\n–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: \n")
    for category in income_by_category:
        print(f"\n{category}: {income_by_category[category]:.2f} —Ä—É–±.\n")


    # –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    expenses_by_category = {}

    for transaction in transactions:
        if transaction.type == Transaction.EXPENSE:
            if transaction.category in expenses_by_category:
                expenses_by_category[transaction.category] += transaction.amount

            else:
                expenses_by_category[transaction.category] = transaction.amount

    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n")

    for category, total in expenses_by_category.items():
        print(f"\n{category}: {total:.2f} —Ä—É–±.\n")

def save_transactions_to_file(transactions, filename="transactions.json"):

    transactions_data = [transaction.to_dict() for transaction in transactions]

    with open(filename, "w", encoding="utf-8") as file:
        json.dump(transactions_data, file, ensure_ascii=False, indent=4)

    print(f"\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}.\n")

def load_transactions_from_file(filename="transactions.json"):

    if not os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return []
    
    with open(filename, "r", encoding="utf-8") as file:
        data = json.load(file)
        return [Transaction(t["id"], t["type"], t["category"], t["amount"], t["description"], t["date"])
                for t in data]
    
    
def main():
    transactions = load_transactions_from_file()

    while True:
        print("\n–ú–µ–Ω—é:\n")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print("5. –í—ã–π—Ç–∏\n")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            add_transaction(transactions)
            save_transactions_to_file(transactions)
        elif choice == "2":
            show_balance(transactions)
        elif choice == "3":
            show_transactions(transactions)
        elif choice == "4":
            show_statistics(transactions)
        elif choice == "5":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 5.")

if __name__ == "__main__":
    main()